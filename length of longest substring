question : "You are provided a string s. Write a python program that returns length of the longest palindromic substring of that string."

def longest_palindrome(s):
    # Create a set to store all substrings of the input string
    substrings = set()

    # Iterate over the string, starting at each character and ending at the last character
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            # Add each substring to the set
            substrings.add(s[i:j])

    # Initialize the longest palindrome length to 0
    longest_palindrome_length = 0

    # Iterate over all substrings and check if they are palindromes
    for substring in substrings:
        # If the substring is a palindrome and its length is greater than the current longest palindrome length,
        # update the longest palindrome length
        if substring == substring[::-1] and len(substring) > longest_palindrome_length:
            longest_palindrome_length = len(substring)

    # Return the longest palindrome length
    return longest_palindrome_length

# Test the function
s = "banana"
print(longest_palindrome(s)) # should print 3
